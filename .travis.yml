# vim ft=yaml
# travis-ci.org definition for MOxUnit build (based on CoSMoMVPA,
# which is based on PyMVPA, which is based on nipype configuration, 
# which in turn was based on nipy)
#
# We pretend to be java because we need GNU Octave which is not
# available (as of April 2015)

language: java

cache:
  # Downloading octave takes a while, so let's cache apt
  apt: true
  directories:
    # Cache octave packages
    - $HOME/octave
env:
 global:
    - OCTAVE=octave
 matrix:
    - WITH_COVERAGE=false
    - WITH_COVERAGE=true
before_install:
    # Remember the directory where our repository to test is located
    - REPOPATH="$(pwd)" && pwd
    - ADDPATH_COMMAND="addpath(genpath(fullfile(pwd)));";
    # to prevent IPv6 being used for APT
    - sudo bash -c "echo 'Acquire::ForceIPv4 \"true\";' > /etc/apt/apt.conf.d/99force-ipv4"
    - travis_retry sudo apt-get -y -qq update
    - travis_retry sudo apt-get install -y -qq software-properties-common python-software-properties
    - travis_retry sudo apt-add-repository -y ppa:octave/stable
    - travis_retry sudo apt-get -y -qq update
    # get Octave 4,0
    - travis_retry sudo apt-get -y -qq install octave liboctave-dev
    # install MOxUnit
    - cd ..
    - rm -rf MOxUnit;
    - git clone https://github.com/MOxUnit/MOxUnit.git
    - make -C MOxUnit install
    # install MOcov
    - cd ..
    - rm -rf MOcov
    - git clone https://github.com/MOcov/MOcov.git
    - make -C MOcov install
    # Go back to the repository directory
    - cd ${REPOPATH}
    # Create copy of the repo for coverage
    - mkdir coverage && cp -r *.m DFN examples tests util coverage
before_script:
  - TEST_ARGS="'-recursive', '-verbose', '-junit_xml_file', 'testresults.xml'";
    if [ "$WITH_COVERAGE" = "true" ]; then
        TEST_ARGS+=", '-with_coverage', '-cover', 'coverage'";
        TEST_ARGS+=", '-cover_exclude', 'tests'";
        TEST_ARGS+=", '-cover_xml_file', 'coverage.xml'";
        TEST_ARGS+=", '-cover_json_file', 'coveralls.json'";
    fi;
    TEST_COMMAND="exit(~moxunit_runtests('tests', $TEST_ARGS));";
    echo "TEST_COMMAND| $TEST_COMMAND";
  # Double-check we are still in the right directory
  - pwd
  # Check what octave packages we have installed
  - octave -q --eval "ver"
  # ---------------------------------------------------------------------------
  # Remove any cached results files from previous build, if present
  - rm -f testresults.xml;
    rm -f coverage.xml;
    rm -f .coverage;
    rm -f coveralls.json;
script:
  - octave -q --eval "$ADDPATH_COMMAND $TEST_COMMAND";
after_success:
  # Only run coveralls on Travis. When running on a public Travis-CI, the
  # repo token is automatically inferred, but to run coveralls on Shippable
  # the repo token needs to be specified in a .coveralls.yml or as an
  # environment variable COVERALLS_REPO_TOKEN. This should be kept hidden
  # from public viewing, either by encrypting the token or running on a
  # private build.
  # We ignore coverage push failures because the servers are not 100%
  # reliable and we don't want the CI to report a failure just because the
  # coverage report wasn't published.
  - if [ "$COVERAGE" = "true" ] && [ "$TRAVIS" = "true" ]; then
      curl --verbose -F json_file=@`pwd`/coveralls.json https://coveralls.io/api/v1/jobs  || echo "Coveralls push failed";
    fi;
